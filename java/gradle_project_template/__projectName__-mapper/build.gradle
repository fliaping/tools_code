buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}

group 'com.dianwoda'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

apply plugin: 'java'
apply plugin: "com.arenagod.gradle.MybatisGenerator"

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/generator/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate {
    doLast {
        def properties = getDbProperties()
        def tablePrefix = properties.getProperty("table.prefix")
        def tableNames = properties.getProperty("table.names").split(",")

        for (int index = 0; index < tableNames.length; index++) {
            def tableName= tableNames[index]
            def noPrefixTableName = tableName.substring(tablePrefix.length(), tableName.length())
            def domainObjectNameSplit = noPrefixTableName.split("_")
            def domainObjectName = ""
            for (int i = 0; i < domainObjectNameSplit.length; i++) {
                domainObjectName +=
                        domainObjectNameSplit[i].substring(0, 1).toUpperCase() + domainObjectNameSplit[i].substring(1);
            }
            domainObjectName = domainObjectName + properties.getProperty("domain.object.suffix")
            println String.format("Generate tableName:%s, domainObjectName:%s", tableName, domainObjectName)

            ant.properties['targetProject'] = projectDir.path
            ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
            ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
            ant.properties['userId'] = properties.getProperty("jdbc.username")
            ant.properties['password'] = properties.getProperty("jdbc.password")
            ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
            ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
            ant.properties['modelPackage'] = properties.getProperty("package.model")
            ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
            ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
            ant.properties['tableName'] = tableName
            ant.properties['domainObjectName'] = domainObjectName
            ant.taskdef(
                    name: 'mbgenerator',
                    classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                    classpath: configurations.mybatisGenerator.asPath
            )
            ant.mbgenerator(overwrite: true,
                    configfile: 'src/main/resources/mybatis/generator/generatorConfig.xml', verbose: true) {
                propertyset {
                    propertyref(name: 'targetProject')
                    propertyref(name: 'userId')
                    propertyref(name: 'driverClass')
                    propertyref(name: 'connectionURL')
                    propertyref(name: 'password')
                    propertyref(name: 'src_main_java')
                    propertyref(name: 'src_main_resources')
                    propertyref(name: 'modelPackage')
                    propertyref(name: 'mapperPackage')
                    propertyref(name: 'sqlMapperPackage')
                    propertyref(name: 'tableName')
                    propertyref(name: 'domainObjectName')
                }
            }
        }

    }
}